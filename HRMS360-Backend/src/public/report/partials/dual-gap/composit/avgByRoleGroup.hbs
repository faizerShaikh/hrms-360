<div class="dont-break break-inside-avoid-page w-full min-h-[1044px] h-fit mx-auto p-5">

  <div class="relative h-full">
    {{> dual-gap/cornerFrames }}
    <div class="bg-primary-light text-primary font-urbanist font-semibold p-2 text-base uppercase">
      AVG GAP SIZE PER ROLE GROUP BY COMPETENCY
    </div>
    <div class="flex justify-between h-full flex-col pt-5 mx-1">
        <div id="avgGapByRole" ></div>
      <div id="avgGapByRoleLegend" class="flex justify-between items-center border-t border-b flex-wrap p-2 mt-4 w-[75%] mx-auto mb-10" style="margin-left:90px"></div>
    </div>
  </div>
</div>
<script>
     var colors = [
      "#FEBD2A",
      "#29AF7F",
      "#260F99",
      "#BEC8D0",
      "#8B0AA5",
      "#A0DA39",
      "#FF7F00",
      "#2C85B2",
      "#19B2FF",
      "#8F7EE5",
    ];
    let updatedColors=[]
  let keys = Object.keys({{{avgGapByRaters}}})
  let values = Object.values({{{avgGapByRaters}}})

  let legends = "";
  {{!-- keys.forEach((key, index) => {
    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[index] ? colors[index] : colors[index % 5]
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
  }); --}}
  keys.forEach((key, index) => {
    if(key == "Self") {
      updatedColors.push(colors[0])
    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[0] 
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
    } else if(key == "Immediate Supervisor") {
      updatedColors.push(colors[1])

    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[1] 
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
    }else if(key == "Indirect Supervisor") {
      updatedColors.push(colors[2])

    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[2] 
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
    }else if(key == "Subordinates") {
      updatedColors.push(colors[3])

    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[3] 
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
    }else if(key == "Peers") {
      updatedColors.push(colors[4])

    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[4] 
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
    }else {
      updatedColors.push(colors[index])

    legends += `
  		<div class="flex justify-start items-center mx-3 mt-1">
  			<div class="bg-[${
          colors[index] 
        }] mr-2 w-5 h-3"></div>
  			<div class="text-neutral-600 text-xs">${key}</div>
  		</div>
  	`;
    }
  });


  document.getElementById("avgGapByRoleLegend").innerHTML = legends;

    let length = {{{competencyNames}}}.length
  let baseOptions = {
    chart: {
      type: "bar",
      height: (keys.length * {{{competencyNames}}}.length) * (length <= 2 ? 50 :30),
      toolbar: {
        show: false,
      },
      animations: {
        enabled: false,
      },
    },
    plotOptions: {
      bar: {
        horizontal: true,
        borderRadius: 2,
        columnWidth: "70%",
        barHeight: "70%",
        dataLabels: {
          position: "top",
        },
      },
    },
    colors:updatedColors,
    dataLabels: {
      enabled: true,
      offsetX: 35,
      formatter:(val)=>{
        return val === 0.0001 ? 0 : val.toFixed(2);
      },
      style: {
        fontSize: "12px",
        colors: ["#171717"],
        fontWeight: 300,
      },
    },
    stroke: {
      show: true,
      width: 1,
      colors: ["#fff"],
    },
    tooltip: {
      shared: true,
      intersect: false,
    },
    xaxis: {
      categories:{{{competencyNames}}},
      min:0,
      max:4,
      tickAmount: 4,
    },
    yaxis: {
      
      labels: {
        show: true,
        align: "right",
        minWidth: 150,
        maxWidth: 200,
        style: {
          colors: "#4d4d4d",
          fontSize: "15px",
          fontFamily: '"Urbanist", "sans-serif"',
        },
      },
    },
    grid: {
      show: true,
      strokeDashArray: 5,
      xaxis: {
        lines: {
          show: true,
        },
      },
      yaxis: {
        lines: {
          show: false,
        },
      },
    },
    legend:{
      show:false
    }
  };

 let batch = values.length/5
   const ele3 = document.createElement("p")
      ele3.className="text-xl text-primary font-urbanist p-2 mt-4 w-full  mb-10 text-center"
      ele3.style.cssText="page-break-after: always;"
    ele3.innerText="(Please Turn Over)"

 for(let i = 0;i<= Math.ceil(values.length/13);i++){
       const ele = document.createElement("div")
        ele.id = `avgGapByRole${i}`
        ele.style.cssText = "position: relative;"

let competencyNamesBatch = {{{competencyNames}}}.slice(i*5,(i+1)*5)
let batchValues = values.map(item => ({...item,data:item.data.slice(i*5,(i+1)*5)}))
  //   Competency Rating in Ascending Order
  let avgGapRoleCompetencyConfig = {
    ...baseOptions,
    chart:{
      ...baseOptions.chart,
      {{!-- height: ((keys.length <=2 ? 2 :keys.length) * competencyNamesBatch.length) * (competencyNamesBatch.length <= 2 ? 50 :30) --}}
      height: ((keys.length <=2 ? 2 :keys.length) * competencyNamesBatch.length) * (competencyNamesBatch.length <= 2 ? 50 :30)
    },
    xaxis: {
      ...baseOptions.xaxis,
      categories:competencyNamesBatch,
    },
    series: batchValues,
  };
   const SelectedLegendElement = document.querySelector("#avgGapByRoleLegend")
  const ClonedLegend = SelectedLegendElement.cloneNode(true)
  ClonedLegend.setAttribute('class','flex flex-wrap justify-between items-center border-t border-b p-2 mt-4 min-w-[75%] mx-auto mb-10 w-fit')

  document.querySelector("#avgGapByRole").appendChild(ele)
  if(i===0 ) {
  document.querySelector("#avgGapByRole").appendChild(ClonedLegend)
    document.querySelector("#avgGapByRole").appendChild(ele3)
  }
  var chart = new ApexCharts(
    ele,
    avgGapRoleCompetencyConfig
  );
  chart.render();
  }
</script>
